map <- add_circle_layer(
map,
agua,                   # objeto sf
id              = "cenotes",   # nombre interno de la capa
radius          = 4,           # tamaño en px
color           = "#3182bd",   # azul cenote
stroke_color    = "white",
stroke_width    = 0.5,
popup = ~sprintf(
"<b>%s</b><br/>Tipo: %s<br/>OSM id: %s",
ifelse(is.na(name), "Sin nombre", name),
natural, osm_id
)
)
# ----- 4. Crear el mapa base (MapLibre = gratis, Mapbox = requiere token) -----
map <- maplibre(          # o mapboxgl() si quieres tu estilo de Map,  # fondo claro; usa el que prefieras
center = ctr,
zoom   = 7
)
# ----- 4. Crear el mapa base (MapLibre = gratis, Mapbox = requiere token) -----
mapagua <- maplibre(          # o mapboxgl() si quieres tu estilo de Map,  # fondo claro; usa el que prefieras
center = ctr,
zoom   = 7
)
mapagua
# ----- 5a. Variante A: capa de círculos (recomendada) -----
map <- add_circle_layer(
mapagua,
agua,                   # objeto sf
id              = "cenotes",   # nombre interno de la capa
radius          = 4,           # tamaño en px
color           = "#3182bd",   # azul cenote
stroke_color    = "white",
stroke_width    = 0.5,
popup = ~sprintf(
"<b>%s</b><br/>Tipo: %s<br/>OSM id: %s",
ifelse(is.na(name), "Sin nombre", name),
natural, osm_id
)
)
# ----- 5a. Variante A: capa de círculos (recomendada) -----
mapuga <- add_circle_layer(
mapagua,
agua,                   # objeto sf
id              = "cenotes",   # nombre interno de la capa
radius          = 4,           # tamaño en px
color           = "#3182bd",   # azul cenote
stroke_color    = "white",
stroke_width    = 0.5,
popup = ~sprintf(
"<b>%s</b><br/>Tipo: %s<br/>OSM id: %s",
ifelse(is.na(name), "Sin nombre", name),
natural, osm_id
)
)
# ----- 5a. Variante A: capa de círculos (recomendada) -----
mapuga <- add_circle_layer(
mapagua,
agua,                   # objeto sf
id              = "cenotes",          # tamaño en px
color           = "#3182bd",   # azul cenote
stroke_color    = "white",
stroke_width    = 0.5,
popup = ~sprintf(
"<b>%s</b><br/>Tipo: %s<br/>OSM id: %s",
ifelse(is.na(name), "Sin nombre", name),
natural, osm_id
)
)
# ----- 5a. Variante A: capa de círculos (recomendada) -----
mapuga <- add_circle_layer(
mapagua,
agua,                   # objeto sf
id              = "cenotes",          # tamaño en px
color           = "#3182bd",   # azul cenote
popup = ~sprintf(
"<b>%s</b><br/>Tipo: %s<br/>OSM id: %s",
ifelse(is.na(name), "Sin nombre", name),
natural, osm_id
)
)
agua
points_sf <- st_as_sf(agua)
mapagua <- maplibre(
center = ctr,
zoom   = 7)
# Add multiple markers from an sf object with IDs from a column
map <- add_markers(
map,
points_sf,
color = "red",
draggable = TRUE,
marker_id = "id"
)
# Add multiple markers from an sf object with IDs from a column
map <- add_markers(
mapagua,
points_sf,
color = "red",
draggable = TRUE,
marker_id = "id"
)
# Add multiple markers from an sf object with IDs from a column
map <- add_markers(
mapagua,
points_sf,
color = "red",
marker_id = "id"
)
# Add multiple markers from an sf object with IDs from a column
map <- add_markers(
mapagua,
points_sf
)
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(sf)
library(DT)
library(kableExtra)
library(ggplot2)
library(viridis)
library(RColorBrewer)
library(plotly)
library(mapgl)
# Configuración para gráficas
theme_set(theme_minimal() +
theme(
text = element_text(color = "white"),
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA),
panel.grid = element_line(color = "rgba(255,255,255,0.1)"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white"),
plot.title = element_text(color = "#64ffda", size = 16, face = "bold"),
plot.subtitle = element_text(color = "white", size = 12)
))
agua <- sf::st_read("Datos/open_street_cenotes.gpkg")
cuerposagua <- mapview::mapview(agua)
cuerposagua
#| message: false
#| warning: false
cuerposagua
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(sf)
library(DT)
library(kableExtra)
library(ggplot2)
library(viridis)
library(RColorBrewer)
library(plotly)
library(mapgl)
# Configuración para gráficas
theme_set(theme_minimal() +
theme(
text = element_text(color = "white"),
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA),
panel.grid = element_line(color = "rgba(255,255,255,0.1)"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white"),
plot.title = element_text(color = "#64ffda", size = 16, face = "bold"),
plot.subtitle = element_text(color = "white", size = 12)
))
# Datos reales de crecimiento poblacional Mérida
anos <- c(1990, 2000, 2010, 2020, 2024)
poblacion_zm <- c(523, 705, 897, 1035, 1142) # Miles de habitantes
poblacion_municipio <- c(400, 542, 777, 892, 973)
datos_poblacion <- data.frame(
Año = rep(anos, 2),
Tipo = rep(c("Zona Metropolitana", "Municipio Mérida"), each = 5),
Poblacion = c(poblacion_zm, poblacion_municipio)
)
p1 <- ggplot(datos_poblacion, aes(x = Año, y = Poblacion, color = Tipo)) +
geom_line(size = 2, alpha = 0.8) +
geom_point(size = 4, alpha = 0.8) +
scale_color_manual(values = c("Zona Metropolitana" = "#64ffda", "Municipio Mérida" = "#ff6b6b")) +
labs(
subtitle = "Miles de habitantes",
x = "Año", y = "Población (miles)",
color = "Área"
) +
theme(legend.position = "bottom")
ggplotly(p1) %>%
layout(plot_bgcolor = 'rgba(0,0,0,0)', paper_bgcolor = 'rgba(0,0,0,0)')
library(terra)
library(mapgl)
# Capa de temperatura media diaria (LST) 2024
temMid <- rast("Datos/LST_Day_Stats_2024.tif")$LST_Day_Mean
colores <- c("#2b83ba", "#7fbeac", "#b4e1a7",
"#ece3a1", "#edc486", "#de4e31")
# 3) Cortes (mismo largo que la paleta)
mapgltemp <- maplibre(
zoom   = 9,
center = c(-89.617, 20.967)          # Mérida
) |>
add_image_source(
id     = "temp",
data   = temMid,
colors = colores
) |>
add_raster_layer(
id             = "temp",
source         = "temp",
raster_opacity = 0.6)
mapgltemp
# Datos de temperatura por sectores de Mérida (basados en estudios reales)
sectores <- data.frame(
Sector = c("Centro Histórico", "Norte (Montejo)", "Poniente", "Oriente",
"Sur", "Dzityá", "Cholul", "Conkal"),
Temp_Max_C = c(42.5, 38.2, 41.0, 40.8, 39.5, 37.8, 38.5, 37.2),
Cobertura_Verde_Pct = c(15, 35, 20, 18, 22, 45, 40, 50),
Densidad_Pob = c("Muy Alta", "Alta", "Alta", "Media", "Media", "Baja", "Baja", "Baja")
)
p2 <- ggplot(sectores, aes(x = Cobertura_Verde_Pct, y = Temp_Max_C,
color = Densidad_Pob, size = Temp_Max_C)) +
geom_point(alpha = 0.8) +
geom_text(aes(label = Sector), vjust = -1.2, size = 3, color = "white") +
scale_color_manual(values = c("Muy Alta" = "#e74c3c", "Alta" = "#f39c12",
"Media" = "#f1c40f", "Baja" = "#2ecc71")) +
scale_size_continuous(range = c(4, 10)) +
labs(
title = "Cobertura Verde vs Temperatura",
subtitle = "Sectores de Mérida, Yucatán",
x = "Cobertura Verde (%)", y = "Temperatura Máxima (°C)",
color = "Densidad", size = "Temp (°C)"
)
ggplotly(p2) %>%
layout(plot_bgcolor = 'rgba(0,0,0,0)', paper_bgcolor = 'rgba(0,0,0,0)')
#| include: false
v2017 <-terra::rast("Datos/2017_mod.tif")
v2024 <-terra::rast("Datos/2024_mod.tif")
coloresverdes <- rev(c(
"#00541B",  # verde muy oscuro
"#1B7837",  # verde bosque
"#4DAF4A",  # verde medio
"#7FBC41",  # verde lima
"#B8E186",  # verde paste
"#FFFFFF"  # blanco
))
#| include: false
m1 <- maplibre(zoom = 9, center = c(-89.617, 20.967)) |>
add_image_source(
id             = "2017",
data         = v2017,
colors         =coloresverdes ) |>
add_raster_layer(
id             = "2017",
source         = "2017",
raster_opacity = 0.5)
m2 <- maplibre(zoom = 9, center = c(-89.617, 20.967)) |>
add_image_source(
id             = "2024",
data         = v2024,
colors         = coloresverdes) |>
add_raster_layer(
id             = "2024",
source         = "2024",
raster_opacity = 0.5)
mapgl::compare(m1, m2)
mapgl::compare(mapgltemp, m2)
agua <- sf::st_read("Datos/open_street_cenotes.gpkg")
#| message: false
#| warning: false
#| include: false
agua <- sf::st_read("Datos/open_street_cenotes.gpkg")
cuerposagua <- mapview::mapview(agua)
#| message: false
#| warning: false
cuerposagua
library(sf)
library(leaflet)
library(leaflet.extras)
bbox <- st_bbox(agua)
ctr  <- c(lng = mean(bbox[c("xmin","xmax")]),
lat = mean(bbox[c("ymin","ymax")]))
# ------------ 3. Preparar pop-ups (opcional) ------------
agua$popup <- sprintf(
"<b>%s</b><br/>Tipo: %s<br/>OSM id: %s",
ifelse(is.na(agua$name), "Sin nombre", agua$name),
agua$natural, agua$osm_id
)
# ------------ 4A. Variante A ─ Marcadores agrupados ------------
m <- leaflet(agua) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr["lng"], lat = ctr["lat"], zoom = 7) |>
addMarkers(
popup  = ~popup,
clusterOptions = markerClusterOptions()
) |>
addFullscreenControl() |>
addScaleBar(position = "bottomleft")
m
#| message: false
#| warning: false
m
ciclovias <- sf::st_read("Datos/Ciclovias_BISIGET_Merida")
ciclovias
ciclovias$popup <- sprintf(
"<b>%s</b><br/>%s",
ciclovias$title,
gsub("\\\\n", "<br/>", ciclovias$descriptio)
)
# B) Paleta basada en la columna 'stroke'
#    Si quieres mapear por otro atributo, cámbialo aquí.
pal_ciclovia <- colorFactor(
palette = unique(ciclovias$stroke),   # toma los hex ya definidos
domain   = ciclovias$stroke
)
# ---------------- 3. Calcular centro/zoom ----------------
bbox_ciclo <- st_bbox(ciclovias)
ctr        <- c(
lng = mean(bbox_ciclo[c("xmin", "xmax")]),
lat = mean(bbox_ciclo[c("ymin", "ymax")])
)
# ---------------- 4. Mapa base ----------------
mapa1 <- leaflet(options = leafletOptions(preferCanvas = TRUE)) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr["lng"], lat = ctr["lat"], zoom = 12)
# ---------------- 5. Añadir ciclovías ----------------
cicloviasmap <- mapa1 |>
addPolylines(
data      = ciclovias,
color     = ~stroke,      # usa el hex de cada registro
weight    = 4,
opacity   = 0.9,
popup     = ~popup,
group     = "Ciclovías",
label     = ~title        # aparece al pasar el cursor
) |>
addLegend(
position = "bottomright",
pal      = pal_ciclovia,
values   = ciclovias$stroke,
title    = "Ciclovías",
labFormat = labelFormat(
transform = function(x) {
# muestra el título en la leyenda (uno por color)
título <- ciclovias$title[match(x, ciclovias$stroke)]
ifelse(is.na(título), x, título)
}
)
)
# ---------------- 8. Visualizar ----------------
cicloviasmap
#| message: false
#| warning: false
# ---------------- 8. Visualizar ----------------
cicloviasmap
VAYVEN <- sf::st_read("Datos/Rutas_vayven/rutas.shp")
VAYVEN
#| message: false
#| warning: false
#| include: false
VAYVEN <- sf::st_read("Datos/Rutas_vayven/rutas.shp")
library(viridisLite)
vayven$popup <- sprintf(
"<b>Ruta VayVen:</b> %s<br/><i>fid:</i> %s",
vayven$shape_id, vayven$fid
)
pal_vay <- colorFactor(
palette = viridis(length(unique(vayven$shape_id)), option = "D"),
domain  = vayven$shape_id
)
bbox_v  <- st_bbox(vayven)
ctr_v   <- c(lng = mean(bbox_v[c("xmin","xmax")]),
lat = mean(bbox_v[c("ymin","ymax")]))
VAVEN <- leaflet(options = leafletOptions(preferCanvas = TRUE)) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr_v["lng"], lat = ctr_v["lat"], zoom = 11)
# ───────────────── 3. Agregar la capa VayVen ─────────────────
VAVENMAP <- VAVEN|>
addPolylines(
data      = vayven,
color     = ~pal_vay(shape_id),   # un color por ruta
weight    = 3,
opacity   = 0.9,
popup     = ~popup,
group     = "VayVen"
) |>
addLegend(
"bottomright",
pal     = pal_vay,
values  = vayven$shape_id,
title   = "Rutas VayVen",
opacity = 1
)
#| message: false
#| warning: false
#| include: false
vayven <- sf::st_read("Datos/Rutas_vayven/rutas.shp")
library(viridisLite)
vayven$popup <- sprintf(
"<b>Ruta VayVen:</b> %s<br/><i>fid:</i> %s",
vayven$shape_id, vayven$fid
)
pal_vay <- colorFactor(
palette = viridis(length(unique(vayven$shape_id)), option = "D"),
domain  = vayven$shape_id
)
bbox_v  <- st_bbox(vayven)
ctr_v   <- c(lng = mean(bbox_v[c("xmin","xmax")]),
lat = mean(bbox_v[c("ymin","ymax")]))
VAVEN <- leaflet(options = leafletOptions(preferCanvas = TRUE)) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr_v["lng"], lat = ctr_v["lat"], zoom = 11)
# ───────────────── 3. Agregar la capa VayVen ─────────────────
VAVENMAP <- VAVEN|>
addPolylines(
data      = vayven,
color     = ~pal_vay(shape_id),   # un color por ruta
weight    = 3,
opacity   = 0.9,
popup     = ~popup,
group     = "VayVen"
) |>
addLegend(
"bottomright",
pal     = pal_vay,
values  = vayven$shape_id,
title   = "Rutas VayVen",
opacity = 1
)
VAVENMAP
# ───────────────── 3. Agregar la capa VayVen ─────────────────
VAVENMAP <- VAVEN|>
addPolylines(
data      = vayven,
color     = ~pal_vay(shape_id),   # un color por ruta
weight    = 3,
opacity   = 0.9,
popup     = ~popup,
group     = "VayVen"
)
VAVENMAP
#| message: false
#| warning: false
VAVENMAP
VAVEN <- leaflet(options = leafletOptions(preferCanvas = TRUE)) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr_v["lng"], lat = ctr_v["lat"], zoom = 15)
# ───────────────── 3. Agregar la capa VayVen ─────────────────
VAVENMAP <- VAVEN|>
addPolylines(
data      = vayven,
color     = ~pal_vay(shape_id),   # un color por ruta
weight    = 3,
opacity   = 0.9,
popup     = ~popup,
group     = "VayVen"
)
```{r}
#| message: false
#| warning: false
VAVENMAP
-------------------------------------------------------------------------
VAVEN <- leaflet(options = leafletOptions(preferCanvas = TRUE)) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr_v["lng"], lat = ctr_v["lat"], zoom = 7)
# ───────────────── 3. Agregar la capa VayVen ─────────────────
VAVENMAP <- VAVEN|>
addPolylines(
data      = vayven,
color     = ~pal_vay(shape_id),   # un color por ruta
weight    = 3,
opacity   = 0.9,
popup     = ~popup,
group     = "VayVen"
)
#| message: false
#| warning: false
VAVENMAP
#| message: false
#| warning: false
#| include: false
vayven <- sf::st_read("Datos/Rutas_vayven/rutas.shp")
library(viridisLite)
vayven$popup <- sprintf(
"<b>Ruta VayVen:</b> %s<br/><i>fid:</i> %s",
vayven$shape_id, vayven$fid
)
pal_vay <- colorFactor(
palette = viridis(length(unique(vayven$shape_id)), option = "D"),
domain  = vayven$shape_id
)
bbox_v  <- st_bbox(vayven)
ctr_v   <- c(lng = mean(bbox_v[c("xmin","xmax")]),
lat = mean(bbox_v[c("ymin","ymax")]))
VAVEN <- leaflet(options = leafletOptions(preferCanvas = TRUE)) |>
addProviderTiles(providers$CartoDB.Voyager) |>
setView(lng = ctr_v["lng"], lat = ctr_v["lat"], zoom = 7)
# ───────────────── 3. Agregar la capa VayVen ─────────────────
VAVENMAP <- VAVEN|>
addPolylines(
data      = vayven,
color     = ~pal_vay(shape_id),   # un color por ruta
weight    = 3,
opacity   = 0.9,
popup     = ~popup,
group     = "VayVen"
)
#| message: false
#| warning: false
VAVENMAP
